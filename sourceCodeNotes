宏定义   文件类型
S_ISREG()   普通文件
S_ISDIR()   目录文件
S_ISCHR()   字符设备文件
S_ISBLK()   块设备文件
S_ISFIFO()  有名管道文件
S_ISLNK()   软连接(符号链接)文件
S_ISSOCK()  套接字文件

geteuid() returns the effective user ID of the calling process.

flock 是对于整个文件的建议性锁。也就是说，如果一个进程在一个文件（inode）上放了锁，那么其它进程是可以知道的。
（建议性锁不强求进程遵守。）最棒的一点是，它的第一个参数是文件描述符，在此文件描述符关闭时，锁会自动释放。
而当进程终止时，所有的文件描述符均会被关闭。于是，很多时候就不用考虑解锁的事情啦。

#ifdef WITH_LTTNG
#define TRACEPOINT_DEFINE
#define TRACEPOINT_PROBE_DYNAMIC_LINKAGE
#include "tracing/objectstore.h"
#undef TRACEPOINT_PROBE_DYNAMIC_LINKAGE
#undef TRACEPOINT_DEFINE
#else
#define tracepoint(...)
#endif

搞清楚这个tracepoint是什么，能不能做性能打点

logger->tinc(l_os_queue_lat, end - start);

这个似乎就是性能打点！

讲解filestore io路径的blog  
http://blog.wjin.org/posts/ceph-filestore.html

void JournalingObjectStore::_op_journal_transactions(bufferlist& tbl, uint32_t orig_len, uint64_t op,Context *onjournal, TrackedOpRef osd_op)
void FileJournal::submit_entry(uint64_t seq, bufferlist& e, uint32_t orig_len, Context *oncommit, TrackedOpRef osd_op)
  
  class FileJournal :
  public Journal,
  public md_config_obs_t
   * Implements journaling on top of block device or file.
 *
 * Lock ordering is write_lock > aio_lock > (completions_lock | finisher_lock)
 
 
 http://bean-li.github.io/bufferlist-in-ceph/
 FileJournal里有一个常出现的结构体，名为bufferlist，其是buffer::list的别名。
 src/include/buffer_fwd.h
 定义了
 namespace ceph {
  namespace buffer {
    class ptr;
    class list;
    class hash;
  }

  using bufferptr = buffer::ptr;
  using bufferlist = buffer::list;
  using bufferhash = buffer::hash;
}

filestore调度过程：
｜
｜
int FileStore::queue_transactions(Sequencer *posr, vector<Transaction>& tls, TrackedOpRef osd_op, ThreadPool::TPHandle *handle)
将list<Transaction> tls倒换到 bufferlist tbl中
｜
｜
int FileJournal::prepare_entry(vector<ObjectStore::Transaction>& tls, bufferlist* tbl)
1. 遍历tls，将每一个transaction encode到临时变量 bufferlist bl中
2. 声明临时变量bufferlist ebl,并添加首部信息、添加上一步生成的bl、添加尾部信息（尾部信息与头部信息，why？）
3. 将上一步的ebl使用CEPH_DIRECTIO_ALIGNMENT进行rebuild，合并多个ptr为一个
4. 将合并后得到的ptr加入出參 tbl中
|
|
|
｜



